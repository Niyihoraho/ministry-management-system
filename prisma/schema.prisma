generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Auth.js Models
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?         // Added for credentials provider
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to existing tables
  approvalrequest_approvalrequest_requestedByIdTouser approvalrequest[] @relation("approvalrequest_requestedByIdTouser")
  approvalrequest_approvalrequest_reviewedByIdTouser  approvalrequest[] @relation("approvalrequest_reviewedByIdTouser")
  auditlog                                            auditlog[]
  document                                            document[]
  notification                                        notification[]
  trainings                                           trainings[]
  userrole                                            userrole[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model alumnismallgroup {
  id                     Int                      @id @default(autoincrement())
  name                   String
  regionId               Int
  region                 region                   @relation(fields: [regionId], references: [id], map: "AlumniSmallGroup_regionId_fkey")
  approvalrequest        approvalrequest[]
  budget                 budget[]
  document               document[]
  member                 member[]
  permanentministryevent permanentministryevent[]
  trainings              trainings[]
  userrole               userrole[]

  @@index([regionId], map: "AlumniSmallGroup_regionId_fkey")
}

model approvalrequest {
  id                                       Int                    @id @default(autoincrement())
  type                                     approvalrequest_type
  status                                   approvalrequest_status @default(pending)
  requestedById                            String
  reviewedById                             String?
  regionId                                 Int?
  universityId                             Int?
  smallGroupId                             Int?
  alumniGroupId                            Int?
  trainingsId                              Int?
  details                                  String?
  createdAt                                DateTime               @default(now())
  reviewedAt                               DateTime?
  alumnismallgroup                         alumnismallgroup?      @relation(fields: [alumniGroupId], references: [id], map: "ApprovalRequest_alumniGroupId_fkey")
  region                                   region?                @relation(fields: [regionId], references: [id], map: "ApprovalRequest_regionId_fkey")
  user_approvalrequest_requestedByIdTouser User                   @relation("approvalrequest_requestedByIdTouser", fields: [requestedById], references: [id], map: "ApprovalRequest_requestedById_fkey")
  user_approvalrequest_reviewedByIdTouser  User?                  @relation("approvalrequest_reviewedByIdTouser", fields: [reviewedById], references: [id], map: "ApprovalRequest_reviewedById_fkey")
  smallgroup                               smallgroup?            @relation(fields: [smallGroupId], references: [id], map: "ApprovalRequest_smallGroupId_fkey")
  trainings                                trainings?             @relation(fields: [trainingsId], references: [id], map: "ApprovalRequest_trainingsId_fkey")
  university                               university?            @relation(fields: [universityId], references: [id], map: "ApprovalRequest_universityId_fkey")

  @@index([alumniGroupId], map: "ApprovalRequest_alumniGroupId_fkey")
  @@index([regionId], map: "ApprovalRequest_regionId_fkey")
  @@index([requestedById], map: "ApprovalRequest_requestedById_fkey")
  @@index([reviewedById], map: "ApprovalRequest_reviewedById_fkey")
  @@index([smallGroupId], map: "ApprovalRequest_smallGroupId_fkey")
  @@index([trainingsId], map: "ApprovalRequest_trainingsId_fkey")
  @@index([universityId], map: "ApprovalRequest_universityId_fkey")
}

model attendance {
  id                     Int                     @id @default(autoincrement())
  memberId               Int
  trainingId             Int?
  permanentEventId       Int?
  status                 attendance_status       @default(present)
  recordedAt             DateTime                @default(now())
  notes                  String?
  member                 member                  @relation(fields: [memberId], references: [id], onDelete: Cascade, map: "Attendance_memberId_fkey")
  permanentministryevent permanentministryevent? @relation(fields: [permanentEventId], references: [id], map: "Attendance_permanentEventId_fkey")
  trainings              trainings?              @relation(fields: [trainingId], references: [id], onDelete: Cascade, map: "Attendance_trainingId_fkey")

  @@unique([memberId, trainingId], map: "Attendance_memberId_trainingId_key")
  @@index([permanentEventId], map: "Attendance_permanentEventId_fkey")
  @@index([trainingId], map: "Attendance_trainingId_fkey")
}

model auditlog {
  id        Int      @id @default(autoincrement())
  action    String
  userId    String?
  details   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], map: "AuditLog_userId_fkey")

  @@index([userId], map: "AuditLog_userId_fkey")
}

model budget {
  id               Int               @id @default(autoincrement())
  name             String
  period           String
  allocatedAmount  Float
  regionId         Int?
  universityId     Int?
  smallGroupId     Int?
  alumniGroupId    Int?
  trainingsId      Int?              @unique(map: "Budget_trainingsId_key")
  alumnismallgroup alumnismallgroup? @relation(fields: [alumniGroupId], references: [id], map: "Budget_alumniGroupId_fkey")
  region           region?           @relation(fields: [regionId], references: [id], map: "Budget_regionId_fkey")
  smallgroup       smallgroup?       @relation(fields: [smallGroupId], references: [id], map: "Budget_smallGroupId_fkey")
  trainings        trainings?        @relation(fields: [trainingsId], references: [id], map: "Budget_trainingsId_fkey")
  university       university?       @relation(fields: [universityId], references: [id], map: "Budget_universityId_fkey")

  @@index([alumniGroupId], map: "Budget_alumniGroupId_fkey")
  @@index([regionId], map: "Budget_regionId_fkey")
  @@index([smallGroupId], map: "Budget_smallGroupId_fkey")
  @@index([universityId], map: "Budget_universityId_fkey")
}

model cells {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name      String
  sector_id BigInt     @db.UnsignedBigInt
  sectors   sectors    @relation(fields: [sector_id], references: [id], onUpdate: Restrict, map: "cells_sector_id_foreign")
  villages  villages[]

  @@index([sector_id], map: "cells_sector_id_foreign")
}

model contribution {
  id                      Int                      @id @default(autoincrement())
  contributorId           Int
  amount                  Float
  method                  contribution_method
  designationId           Int?
  status                  contribution_status
  transactionId           String?                  @unique(map: "Contribution_transactionId_key")
  paymentTransactionId    Int?
  createdAt               DateTime                 @default(now())
  memberId                Int?
  contributor             contributor              @relation(fields: [contributorId], references: [id], map: "Contribution_contributorId_fkey")
  contributiondesignation contributiondesignation? @relation(fields: [designationId], references: [id], map: "Contribution_designationId_fkey")
  member                  member?                  @relation(fields: [memberId], references: [id], map: "Contribution_memberId_fkey")
  paymenttransaction      paymenttransaction?      @relation(fields: [paymentTransactionId], references: [id], map: "Contribution_paymentTransactionId_fkey")
  contributionreceipt     contributionreceipt?

  @@index([contributorId], map: "Contribution_contributorId_fkey")
  @@index([designationId], map: "Contribution_designationId_fkey")
  @@index([memberId], map: "Contribution_memberId_fkey")
  @@index([paymentTransactionId], map: "Contribution_paymentTransactionId_fkey")
}

model contributiondesignation {
  id            Int            @id @default(autoincrement())
  name          String         @unique(map: "ContributionDesignation_name_key")
  description   String?
  targetAmount  Float?
  currentAmount Float          @default(0)
  isActive      Boolean        @default(true)
  regionId      Int?
  universityId  Int?
  smallGroupId  Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  contribution  contribution[]
  region        region?        @relation(fields: [regionId], references: [id], map: "ContributionDesignation_regionId_fkey")
  smallgroup    smallgroup?    @relation(fields: [smallGroupId], references: [id], map: "ContributionDesignation_smallGroupId_fkey")
  university    university?    @relation(fields: [universityId], references: [id], map: "ContributionDesignation_universityId_fkey")

  @@index([regionId], map: "ContributionDesignation_regionId_fkey")
  @@index([smallGroupId], map: "ContributionDesignation_smallGroupId_fkey")
  @@index([universityId], map: "ContributionDesignation_universityId_fkey")
}

model contributionreceipt {
  id             Int          @id @default(autoincrement())
  contributionId Int          @unique(map: "ContributionReceipt_contributionId_key")
  receiptNumber  String       @unique(map: "ContributionReceipt_receiptNumber_key")
  pdfPath        String?
  emailSent      Boolean      @default(false)
  emailSentAt    DateTime?
  smsSent        Boolean      @default(false)
  smsSentAt      DateTime?
  createdAt      DateTime     @default(now())
  contribution   contribution @relation(fields: [contributionId], references: [id], map: "ContributionReceipt_contributionId_fkey")
}

model contributor {
  id           Int            @id @default(autoincrement())
  name         String
  email        String?        @unique(map: "Contributor_email_key")
  phone        String?
  memberId     Int?           @unique(map: "Contributor_memberId_key")
  contribution contribution[]
  member       member?        @relation(fields: [memberId], references: [id], map: "Contributor_memberId_fkey")
}

model districts {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  province_id BigInt    @db.UnsignedBigInt
  provinces   provinces @relation(fields: [province_id], references: [id], onUpdate: Restrict, map: "districts_province_id_foreign")
  sectors     sectors[]

  @@index([province_id], map: "districts_province_id_foreign")
}

model document {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  url              String
  uploadedById     String
  regionId         Int?
  universityId     Int?
  smallGroupId     Int?
  alumniGroupId    Int?
  createdAt        DateTime          @default(now())
  alumnismallgroup alumnismallgroup? @relation(fields: [alumniGroupId], references: [id], map: "Document_alumniGroupId_fkey")
  region           region?           @relation(fields: [regionId], references: [id], map: "Document_regionId_fkey")
  smallgroup       smallgroup?       @relation(fields: [smallGroupId], references: [id], map: "Document_smallGroupId_fkey")
  university       university?       @relation(fields: [universityId], references: [id], map: "Document_universityId_fkey")
  user             User              @relation(fields: [uploadedById], references: [id], map: "Document_uploadedById_fkey")

  @@index([alumniGroupId], map: "Document_alumniGroupId_fkey")
  @@index([regionId], map: "Document_regionId_fkey")
  @@index([smallGroupId], map: "Document_smallGroupId_fkey")
  @@index([universityId], map: "Document_universityId_fkey")
  @@index([uploadedById], map: "Document_uploadedById_fkey")
}

model member {
  id                   Int               @id @default(autoincrement())
  firstname            String?
  secondname           String?
  gender               String?
  birthdate            DateTime?
  placeOfBirthDistrict String?
  placeOfBirthSector   String?
  placeOfBirthCell     String?
  placeOfBirthVillage  String?
  localChurch          String?
  email                String?           @unique(map: "Member_email_key")
  phone                String?
  type                 member_type
  status               member_status     @default(active)
  regionId             Int?
  universityId         Int?
  smallGroupId         Int?
  alumniGroupId        Int?
  graduationDate       DateTime?
  faculty              String?
  professionalism      String?
  maritalStatus        String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime
  attendance           attendance[]
  contribution         contribution[]
  contributor          contributor?
  alumnismallgroup     alumnismallgroup? @relation(fields: [alumniGroupId], references: [id], map: "Member_alumniGroupId_fkey")
  region               region?           @relation(fields: [regionId], references: [id], map: "Member_regionId_fkey")
  smallgroup           smallgroup?       @relation(fields: [smallGroupId], references: [id], map: "Member_smallGroupId_fkey")
  university           university?       @relation(fields: [universityId], references: [id], map: "Member_universityId_fkey")
  movement             movement[]
  staffprofile         staffprofile?
  volunteerprofile     volunteerprofile?

  @@index([alumniGroupId], map: "Member_alumniGroupId_fkey")
  @@index([regionId], map: "Member_regionId_fkey")
  @@index([smallGroupId], map: "Member_smallGroupId_fkey")
  @@index([universityId], map: "Member_universityId_fkey")
}

model movement {
  id           Int      @id @default(autoincrement())
  memberId     Int
  fromGroupId  Int?
  toGroupId    Int?
  fromLocation String?
  toLocation   String?
  reason       String?
  movedAt      DateTime @default(now())
  member       member   @relation(fields: [memberId], references: [id], map: "Movement_memberId_fkey")

  @@index([memberId], map: "Movement_memberId_fkey")
}

model notification {
  id        Int                 @id @default(autoincrement())
  userId    String?
  type      notification_type
  subject   String?
  message   String
  status    notification_status
  sentAt    DateTime?
  createdAt DateTime            @default(now())
  user      User?               @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model paymentgateway {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique(map: "PaymentGateway_name_key")
  provider           String
  isActive           Boolean              @default(true)
  configuration      String               @db.LongText
  supportedMethods   String               @db.LongText
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  paymenttransaction paymenttransaction[]
}

model paymenttransaction {
  id              Int                       @id @default(autoincrement())
  externalId      String                    @unique(map: "PaymentTransaction_externalId_key")
  gatewayId       Int
  amount          Float
  currency        String                    @default("RWF")
  phoneNumber     String?
  email           String?
  payerName       String?
  status          paymenttransaction_status @default(initiated)
  gatewayResponse String?                   @db.LongText
  failureReason   String?
  webhookVerified Boolean                   @default(false)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime
  contribution    contribution[]
  paymentgateway  paymentgateway            @relation(fields: [gatewayId], references: [id], map: "PaymentTransaction_gatewayId_fkey")

  @@index([gatewayId], map: "PaymentTransaction_gatewayId_fkey")
}

model permanentministryevent {
  id               Int                         @id @default(autoincrement())
  name             String
  type             permanentministryevent_type
  regionId         Int?
  universityId     Int?
  smallGroupId     Int?
  alumniGroupId    Int?
  isActive         Boolean                     @default(true)
  createdAt        DateTime                    @default(now())
  updatedAt        DateTime
  attendance       attendance[]
  alumnismallgroup alumnismallgroup?           @relation(fields: [alumniGroupId], references: [id], map: "PermanentMinistryEvent_alumniGroupId_fkey")
  region           region?                     @relation(fields: [regionId], references: [id], map: "PermanentMinistryEvent_regionId_fkey")
  smallgroup       smallgroup?                 @relation(fields: [smallGroupId], references: [id], map: "PermanentMinistryEvent_smallGroupId_fkey")
  university       university?                 @relation(fields: [universityId], references: [id], map: "PermanentMinistryEvent_universityId_fkey")

  @@index([alumniGroupId], map: "PermanentMinistryEvent_alumniGroupId_fkey")
  @@index([regionId], map: "PermanentMinistryEvent_regionId_fkey")
  @@index([smallGroupId], map: "PermanentMinistryEvent_smallGroupId_fkey")
  @@index([universityId], map: "PermanentMinistryEvent_universityId_fkey")
}

model provinces {
  id        BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name      String
  districts districts[]
}

model region {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique(map: "Region_name_key")
  alumnismallgroup        alumnismallgroup[]
  approvalrequest         approvalrequest[]
  budget                  budget[]
  contributiondesignation contributiondesignation[]
  document                document[]
  member                  member[]
  permanentministryevent  permanentministryevent[]
  smallgroup              smallgroup[]
  trainings               trainings[]
  university              university[]
  userrole                userrole[]
}

model sectors {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  district_id BigInt    @db.UnsignedBigInt
  cells       cells[]
  districts   districts @relation(fields: [district_id], references: [id], onUpdate: Restrict, map: "sectors_district_id_foreign")

  @@index([district_id], map: "sectors_district_id_foreign")
}

model smallgroup {
  id                      Int                       @id @default(autoincrement())
  name                    String
  universityId            Int
  regionId                Int
  approvalrequest         approvalrequest[]
  budget                  budget[]
  contributiondesignation contributiondesignation[]
  document                document[]
  member                  member[]
  permanentministryevent  permanentministryevent[]
  region                  region                    @relation(fields: [regionId], references: [id], map: "SmallGroup_regionId_fkey")
  university              university                @relation(fields: [universityId], references: [id], map: "SmallGroup_universityId_fkey")
  trainings               trainings[]
  userrole                userrole[]

  @@index([regionId], map: "SmallGroup_regionId_fkey")
  @@index([universityId], map: "SmallGroup_universityId_fkey")
}

model staffprofile {
  id         Int       @id @default(autoincrement())
  memberId   Int       @unique(map: "StaffProfile_memberId_key")
  position   String?
  startDate  DateTime?
  endDate    DateTime?
  mentorship String?
  notes      String?
  member     member    @relation(fields: [memberId], references: [id], map: "StaffProfile_memberId_fkey")
}

model trainings {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  startDateTime    DateTime
  endDateTime      DateTime?
  location         String?
  regionId         Int?
  universityId     Int?
  smallGroupId     Int?
  alumniGroupId    Int?
  createdById      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  approvalrequest  approvalrequest[]
  attendance       attendance[]
  budget           budget?
  alumnismallgroup alumnismallgroup? @relation(fields: [alumniGroupId], references: [id], map: "Trainings_alumniGroupId_fkey")
  user             User              @relation(fields: [createdById], references: [id], map: "Trainings_createdById_fkey")
  region           region?           @relation(fields: [regionId], references: [id], map: "Trainings_regionId_fkey")
  smallgroup       smallgroup?       @relation(fields: [smallGroupId], references: [id], map: "Trainings_smallGroupId_fkey")
  university       university?       @relation(fields: [universityId], references: [id], map: "Trainings_universityId_fkey")

  @@index([alumniGroupId], map: "Trainings_alumniGroupId_fkey")
  @@index([createdById], map: "Trainings_createdById_fkey")
  @@index([regionId], map: "Trainings_regionId_fkey")
  @@index([smallGroupId], map: "Trainings_smallGroupId_fkey")
  @@index([universityId], map: "Trainings_universityId_fkey")
}

model university {
  id                      Int                       @id @default(autoincrement())
  name                    String
  regionId                Int
  approvalrequest         approvalrequest[]
  budget                  budget[]
  contributiondesignation contributiondesignation[]
  document                document[]
  member                  member[]
  permanentministryevent  permanentministryevent[]
  smallgroup              smallgroup[]
  trainings               trainings[]
  region                  region                    @relation(fields: [regionId], references: [id], map: "University_regionId_fkey")
  userrole                userrole[]

  @@index([regionId], map: "University_regionId_fkey")
}

model villages {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  name    String
  cell_id BigInt @db.UnsignedBigInt
  cells   cells  @relation(fields: [cell_id], references: [id], onUpdate: Restrict, map: "villages_cell_id_foreign")

  @@index([cell_id], map: "villages_cell_id_foreign")
}

model volunteerprofile {
  id              Int       @id @default(autoincrement())
  memberId        Int       @unique(map: "VolunteerProfile_memberId_key")
  skills          String?
  hours           Int       @default(0)
  commitmentLevel String?
  onboardingDate  DateTime?
  exitDate        DateTime?
  notes           String?
  member          member    @relation(fields: [memberId], references: [id], map: "VolunteerProfile_memberId_fkey")
}

model userrole {
  id            Int             @id @default(autoincrement())
  userId        String
  regionId      Int?
  universityId  Int?
  smallGroupId  Int?
  alumniGroupId Int?
  scope         userrole_scope  @default(superadmin)
  assignedAt    DateTime        @default(now())

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  region           region?           @relation(fields: [regionId], references: [id])
  smallgroup       smallgroup?       @relation(fields: [smallGroupId], references: [id])
  university       university?       @relation(fields: [universityId], references: [id])
  alumnismallgroup alumnismallgroup? @relation(fields: [alumniGroupId], references: [id])

  @@index([userId])
  @@index([regionId])
  @@index([smallGroupId])
  @@index([universityId])
  @@index([alumniGroupId])
}

enum approvalrequest_type {
  role_assignment
  training
  financial
  group_creation
  other
}

enum approvalrequest_status {
  pending
  approved
  rejected
}

enum notification_type {
  email
  sms
  in_app
}

enum permanentministryevent_type {
  bible_study
  discipleship
  evangelism
  cell_meeting
  alumni_meeting
  other
}

enum contribution_method {
  mobile_money
  bank_transfer
  card
  worldremit
}

enum attendance_status {
  present
  absent
  excused
}

enum contribution_status {
  pending
  completed
  failed
  refunded
  processing
  cancelled
}

enum notification_status {
  sent
  pending
  failed
}

enum paymenttransaction_status {
  initiated
  processing
  completed
  failed
  cancelled
  refunded
}

enum member_type {
  student
  graduate
  staff
  volunteer
  alumni
}

enum member_status {
  active
  pre_graduate
  graduate
  alumni
  inactive
}

enum userrole_scope {
  superadmin
  national
  region
  university
  smallgroup
  alumnismallgroup
}
